#include "stm32_gpio.h"


void GPIO_PeriClockControl(GPIO_RegDef_t*GPIOx, uint8_t EnorDi)
{
  if(EnorDi==ENABLE)
  {
      if(GPIOx==GPIOA)
      {
        GPIOA_PCLK_EN();
      }
      if(GPIOx==GPIOB)
      {
        GPIOB_PCLK_EN();
      }
      if(GPIOx==GPIOC)
      {
        GPIOC_PCLK_EN();
      }
      if(GPIOx==GPIOD)
      {
        GPIOD_PCLK_EN();
      }
      if(GPIOx==GPIOE)
      {
        GPIOE_PCLK_EN();
      }
  }
  else
  {
      if(GPIOx==GPIOA)
      {
        GPIOA_PCLK_DI();
      }
      if(GPIOx==GPIOB)
      {
        GPIOB_PCLK_DI();
      }
      if(GPIOx==GPIOC)
      {
        GPIOC_PCLK_DI();
      }
      if(GPIOx==GPIOD)
      {
        GPIOD_PCLK_DI();
      }
      if(GPIOx==GPIOE)
      {
        GPIOE_PCLK_DI();
      }    
  }
}   


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{ 
  GPIO_PeriClockControl(pGPIOHandle->GPIOx, ENABLE);
  //config CNF
  uint32_t temp=0;
  if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<=GPIO_MODE_ANALOG)
  {
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber<8)
    {
      temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
      pGPIOHandle->GPIOx->CRL &=(~0x3<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber+(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber+1))));
      pGPIOHandle->GPIOx->CRL |= temp;
    }
    else
    {
      temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
      pGPIOHandle->GPIOx->CRH &=(~0x3<<(2*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber+(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber+1))));
      pGPIOHandle->GPIOx->CRH |= temp;
    }
    
  }
  else
  {
      if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FL)
      { 
        //config FTSR
        EXTI->FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
        // clear RTSR bit
        EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
      }
      else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
      {
        EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
        EXTI->FTSR &=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
      }
      else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
      {
         EXTI->FTSR |=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
         EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
      }
       //IMR Config
      EXTI->IMR|=1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
  }
  //config MODE
  if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber<8)
  {
  temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
  pGPIOHandle->GPIOx->CRL &=(~0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
  pGPIOHandle->GPIOx->CRL |= temp;
  }
  else
  {
  temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
  pGPIOHandle->GPIOx->CRH &=(~0x3<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
  pGPIOHandle->GPIOx->CRH |= temp;
  }
  //config optype
  
}
void GPIO_DeInit(GPIO_RegDef_t *GPIOx)
{
  if(GPIOx==GPIOA)
  {
    GPIOA_REG_RESET();
  }
  else if(GPIOx==GPIOB)
  {
    GPIOB_REG_RESET();
  }
  else if(GPIOx==GPIOC)
  {
    GPIOC_REG_RESET();
  }
  else if(GPIOx==GPIOD)
  {
    GPIOD_REG_RESET();
  }
  else if(GPIOx==GPIOE)
  {
    GPIOE_REG_RESET();
  }    
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *GPIOx,uint8_t PinNumber)
{
  uint8_t value;
  value = (uint8_t)(GPIOx->IDR>>PinNumber) &0x00000001;
  return value;
}
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *GPIOx)
{
  uint16_t value;
  value = (uint16_t)(GPIOx->IDR);
  return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *GPIOx, uint8_t PinNumber, uint8_t Value)
{
  if(Value==GPIO_PIN_SET)
  {
    GPIOx->ODR |=(1<<PinNumber);
  }
  else
  {
    GPIOx->ODR &= ~(1<<PinNumber);
  }
}
void GPIO_WriteToOutputPort(GPIO_RegDef_t *GPIOx,uint16_t Value)
{
  GPIOx->ODR = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *GPIOx,uint8_t PinNumber)
{
  GPIOx->ODR ^=(1<<PinNumber);
}

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
  if(EnorDi==ENABLE)
  {
    if(IRQNumber<=31)
    {
      //program ISER0 Register
      *NVIC_ISER0 |= (1<<IRQNumber);
    }
    else if (IRQNumber>31 && IRQNumber<64)
    {   
      //program ISER1 Register
      *NVIC_ISER1 |= (1<<(IRQNumber%32));
    }
      else if (IRQNumber>=64 && IRQNumber<96)
    {
      //program ISER2 Register
      *NVIC_ISER2 |= (1<<(IRQNumber%64));
    }
    
  }
  else
  {
    if(IRQNumber<=31)
    {
      //program ICER0 Register
      *NVIC_ICER0 |= (1<<IRQNumber);
    }
    else if (IRQNumber>31 && IRQNumber<64)
    {   
      //program ICER1 Register
      *NVIC_ICER1 |= (1<<(IRQNumber%32));
    }
      else if (IRQNumber>=64 && IRQNumber<96)
    {
      //program ICER2 Register
      *NVIC_ICER2 |= (1<<(IRQNumber%64));
    }
  }
}
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
    uint8_t ipr = IRQNumber/4;
    uint8_t irq = IRQNumber%4;
    *(NVIC_PR_BASE_ADDR + ipr) |= (IRQPriority<<(8*irq +4);
}
void GPIO_IRQHandling(uint8_t PinNumber)
{
  // clear pending
  if(EXTI->PR & (1<<PinNumber))
  {
      EXTI->PR |= (1<<PinNumber)
  }
}